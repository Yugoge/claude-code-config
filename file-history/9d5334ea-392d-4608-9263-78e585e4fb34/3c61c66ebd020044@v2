# Personal Knowledge System

An AI-powered personal knowledge management and spaced repetition learning system built on Claude Code.

## Features

- **Multi-format Support**: PDF, EPUB, PowerPoint, Word, Excel, Markdown
- **Socratic Learning**: Interactive dialogue-based teaching (not passive reading)
- **RemNote-style Knowledge Base**: Hierarchical concepts with bidirectional links
- **Spaced Repetition**: SM-2 algorithm for optimal review scheduling
- **Dual Taxonomy**: UNESCO ISCED + Dewey Decimal classification
- **Progress Tracking**: Fine-grained tracking at page/chapter/concept level
- **Git-Friendly**: Everything stored as Markdown for version control
- **Universal Q&A**: Ask any question with automatic web research
- **Conversation Archival**: Preserve all learning dialogues as structured knowledge

## Quick Start

### 1. Initialize System

```bash
cd /root/knowledge-system
/kb-init
```

### 2. Add Learning Materials

Place your materials in the appropriate domain folder:

```
learning-materials/
├── finance/
│   └── options-trading.pdf
├── programming/
│   └── algorithms-textbook.pdf
└── language/
    └── spanish-grammar.epub
```

### 3. Start Learning

```bash
/learn learning-materials/finance/options-trading.pdf
```

The AI tutor will:
- Present passages from the material
- Ask Socratic questions to test understanding
- Extract concepts as knowledge Rems
- Track your progress automatically

### 4. Review Regularly

```bash
/review
```

The review system will:
- Present concepts due for review (based on SM-2)
- Test recall through dialogue
- Adjust review schedule based on performance

### 5. Track Progress

```bash
/progress                    # Overall progress
/progress finance            # Domain-specific
/progress learning-materials/finance/options-trading.pdf  # Material-specific
```

## System Architecture

```
knowledge-system/
├── .claude/                    # Claude Code configuration
│   ├── commands/               # Slash commands (/learn, /review, etc.)
│   ├── agents/                 # Specialized AI tutors
│   │   ├── book-tutor/
│   │   ├── language-tutor/
│   │   ├── finance-tutor/
│   │   ├── programming-tutor/
│   │   ├── review-master/
│   │   └── knowledge-indexer/
│   ├── hooks/
│   └── CLAUDE.md
├── learning-materials/         # Original materials + progress tracking
│   ├── .index.json
│   ├── finance/
│   ├── programming/
│   └── language/
├── knowledge-base/             # Extracted knowledge (Rem-style)
│   ├── .taxonomy.json
│   ├── _index/
│   │   ├── backlinks.json      # Bidirectional link index
│   │   ├── by-isced.md
│   │   ├── by-dewey.md
│   │   └── by-tag.md
│   ├── finance/
│   ├── programming/
│   └── language/
├── .review/                    # Review system data
│   ├── schedule.json           # SM-2 scheduling
│   └── history.json            # Learning history
├── chats/                      # Conversation archives
│   └── index.json              # conversations map + metadata
├── scripts/                    # Utility scripts
│   ├── sm2-algorithm.py
│   ├── parse-ppt.py
│   ├── parse-epub.py
│   ├── rebuild-backlinks.py
│   └── rebuild-indexes.py
└── README.md
```

## 🎯 Hooks & Automation

The system uses **hooks** (event-driven triggers) to provide automatic safety checks, maintenance, and auditing.

### Active Hooks

| Hook | Trigger | Function | Purpose |
|------|---------|----------|---------|
| **SessionStart** | Session begins | Log timestamp to `~/.claude/session.log` | Session tracking, duration calculation |
| **UserPromptSubmit** | User input submitted | Scan for dangerous commands (`rm`, `del`, `-rf`) | Prevent accidental destructive input |
| **PreToolUse (Bash)** | Before AI runs Bash | Block dangerous commands (`rm`, `:>`, `Format`) | Protect system from AI errors |
| **PreToolUse (Edit)** | Before AI edits file | Block edits to `knowledge-base/_index/` | Protect auto-generated indexes |
| **PostToolUse (Edit)** | After AI edits file | Auto-run `rebuild-backlinks.py` if editing `knowledge-base/` | Keep knowledge graph synchronized |
| **SubagentStop** | Agent finishes | Log completion if agent is `review-master` | Audit trail for review sessions |
| **PreCompact** | Before context compression | Backup `chats/index.json` | Prevent data loss during compression |
| **Stop** | Session stops | Log timestamp | Session tracking |
| **SessionEnd** | Session ends | Log timestamp | Session tracking |

### Key Automation Examples

**Auto-Index Maintenance**:
```
AI edits: knowledge-base/finance/concepts/call-option.md
    (adds [[new-concept]] link)
    ↓
PostToolUse Hook triggers
    ↓
Automatically runs: scripts/rebuild-backlinks.py
    ↓
Updates: backlinks.json with bidirectional links
    ↓
Knowledge graph stays synchronized (no manual maintenance!)
```

**Safety Protection**:
```
User types: "rm -rf temp/"
    ↓
UserPromptSubmit Hook scans input
    ↓
Detects: "rm -rf" pattern
    ↓
Warns user (but doesn't block - you have control)
```

```
AI attempts: Bash("rm important-file.txt")
    ↓
PreToolUse Hook scans command
    ↓
Detects: "rm" pattern
    ↓
Blocks execution → File protected
```

**Review Audit Trail**:
```
User: /review finance
    ↓
review-master agent conducts session
    ↓
SubagentStop Hook detects agent completion
    ↓
Logs: "2025-10-26T16:45:00Z review done" → .review/history.log
    ↓
Enables: Review frequency statistics and consistency tracking
```

---

## 🏗️ Architecture Overview

### Layered System Design

```
📁 Knowledge System Architecture
│
├─── 🌐 Global Configuration Layer
│    │
│    └─── ~/.claude/CLAUDE.md
│         ├─ Core principles (security, read-before-edit, parallel execution)
│         ├─ Coding standards (PEP8, 2-space indent)
│         └─ MCP rules (Context7 auto-activation)
│
├─── 🏗️ Project Configuration Layer
│    │
│    ├─── .claude/CLAUDE.md (project-specific)
│    │    ├─ System overview (PKM + spaced repetition)
│    │    ├─ Learning method (Socratic dialogue)
│    │    └─ Knowledge structure (RemNote-style)
│    │
│    └─── .claude/settings.json (hooks automation)
│         └─→ [9 hooks: SessionStart, UserPromptSubmit, PreToolUse,
│              PostToolUse, SubagentStop, PreCompact, Stop, SessionEnd]
│
├─── ⚙️ Commands Layer (User Interface)
│    │
│    ├─── /learn ──────────┐
│    ├─── /review ─────────┤
│    ├─── /progress ───────┤→ Route user intent to agents
│    ├─── /ask ────────────┤
│    ├─── /archive-conversation ┤
│    └─── /kb-init ────────┘
│
├─── 🤖 Agents Layer (Execution)
│    │
│    ├─── book-tutor ──────┐
│    ├─── finance-tutor ───┤
│    ├─── language-tutor ──┤
│    ├─── programming-tutor ┤→ Specialized AI workers
│    ├─── review-master ───┤
│    └─── knowledge-indexer ┘
│
├─── 💾 Data Layer (Storage)
│    │
│    ├─── learning-materials/ (PDFs, EPUB, progress tracking)
│    ├─── knowledge-base/ (Rems, indexes, taxonomy)
│    ├─── .review/ (SM-2 schedules, history)
│    ├─── chats/ (conversation archives)
│    └─── scripts/ (utilities, parsers, algorithms)
│
└─── 📊 Logging Layer
     │
     └─── ~/.claude/session.log (timestamps, audit trail)
```

### Configuration Hierarchy

```
Global CLAUDE.md (coding standards, security rules)
    ↓ overridden by
Project CLAUDE.md (system behavior, learning method)
    ↓ runtime automation by
settings.json (hooks for safety and automation)
```

**Priority**: Project settings > Global settings

---

## 🔄 Component Interactions

### Flow 1: Learning Session

```
1. User: /learn finance/options.pdf
       ↓
2. SessionStart Hook → Log session start
       ↓
3. UserPromptSubmit Hook → Safety check (pass)
       ↓
4. /learn Command
   ├─ Read: project CLAUDE.md
   ├─ Check: learning-materials/.index.json
   ├─ Determine domain: finance
   └─ Launch: finance-tutor agent
       ↓
5. finance-tutor Agent
   ├─ Read: options.pdf (chunk 1-30 pages)
   ├─ Socratic dialogue (question → evaluate → feedback)
   ├─ Extract concepts: [[call-option]], [[put-option]]
   └─ Write: knowledge-base/finance/concepts/call-option.md
       ↓
6. PostToolUse Hook (Edit)
   └─ Auto-run: scripts/rebuild-backlinks.py
      └─ Update: backlinks.json
          ↓
7. SessionEnd Hook → Log session end
```

**Key Insight**: Knowledge graph stays synchronized automatically - no manual maintenance needed!

---

### Flow 2: Dangerous Command Protection

```
1. AI: Bash("rm -rf temp/")
       ↓
2. PreToolUse Hook (Bash)
   ├─ Scan command: "rm -rf temp/"
   ├─ Regex match: r'rm\s|-rf' → ✅ Detected
   └─ Action: exit(1) → 🛑 BLOCKED
       ↓
3. User sees: "Hook blocked this command for safety"
       ↓
4. Command never executes → System protected
```

**Safety Layer**: Three-level protection
1. UserPromptSubmit → Scan user input
2. PreToolUse (Bash) → Block dangerous AI commands
3. PreToolUse (Edit) → Protect critical files (`_index/`)

---

### Flow 3: Auto-Index Maintenance

```
1. AI: Edit knowledge-base/finance/concepts/option.md
       (adds [[intrinsic-value]] link)
       ↓
2. PreToolUse Hook (Edit)
   ├─ Check path: not in '_index/' → ✅ Allow
   └─ Edit proceeds
       ↓
3. File saved with new [[intrinsic-value]] link
       ↓
4. PostToolUse Hook (Edit)
   ├─ Detect: path contains 'knowledge-base/'
   ├─ Condition met → Execute:
   └─ subprocess.run(['python3', 'scripts/rebuild-backlinks.py'])
       ↓
5. rebuild-backlinks.py
   ├─ Scan all .md files for [[links]]
   ├─ Rebuild backlinks.json
   └─ Update bidirectional links:
       option ↔ intrinsic-value
       ↓
6. Knowledge graph synchronized automatically ✅
```

**Automation Benefit**: Traditional PKM tools require manual link maintenance or plugins. This system does it automatically on every edit.

---

### Core Design Patterns

#### 1. **Hook-Driven Automation**
```
Event → Hook → Automatic Action

Example:
Edit knowledge-base/ → PostToolUse → rebuild-backlinks.py
```
**Benefit**: No manual index maintenance

---

#### 2. **Command-Agent Separation**
```
/learn (Command: routing, parameter parsing)
    ↓
finance-tutor (Agent: domain expertise, teaching)
```
**Benefit**: Clean separation of concerns, easy to extend

---

#### 3. **Layered Configuration**
```
Global CLAUDE.md (universal rules)
    ↓
Project CLAUDE.md (system-specific behavior)
    ↓
settings.json (runtime automation)
```
**Benefit**: Consistency across projects + per-project customization

---

#### 4. **Defensive Programming**
```
Safety Layers:
1. UserPromptSubmit → Check user input
2. PreToolUse → Check AI actions before execution
3. File protection → Block edits to critical files

Error Handling:
- on_error: "warn" → Non-fatal errors only warn
- on_error: "ignore" → Auxiliary features fail gracefully
- .get('field', default) → Safe JSON field access
```
**Benefit**: Robust system that doesn't break on edge cases

---

### Data Flow

```
User Input
    ↓
UserPromptSubmit Hook (safety check)
    ↓
Command (routing)
    ↓
Agent (business logic)
    ├─ PreToolUse Hook (pre-action check)
    ├─ Data Layer Operations (Read/Write/Edit)
    └─ PostToolUse Hook (auto-maintenance)
         └─→ rebuild-backlinks.py → Update indexes
    ↓
SubagentStop Hook (audit log)
    ↓
SessionEnd Hook (session tracking)
```

---

## Key Concepts

### Rem-style Knowledge Points

Each concept is stored as a Markdown file with:

- **Hierarchical structure**: Parent → Child relationships
- **Bidirectional links**: `[[concept-a]]` ↔ `[[concept-b]]`
- **Tags**: Domain, difficulty, topic tags
- **Metadata**: Creation date, review history, SM-2 data
- **Dual taxonomy**: UNESCO ISCED + Dewey Decimal codes

Example:
```markdown
---
id: call-option-intrinsic-value
title: Call Option Intrinsic Value
tags: [finance, options, derivatives]
isced: ["34"]
dewey: ["300"]
---

# Call Option Intrinsic Value

## Related Concepts
- [[option-valuation]] - Parent concept
- [[put-option-intrinsic-value]] - Mirror concept
- [[time-value]] - Complementary concept

[...]
```

### Learning Flow

1. **Chunked Processing**: Large materials are processed in manageable chunks to respect Claude Code's context limits
2. **Incremental Progress**: Progress tracked at multiple granularities (page, chapter, concept)
3. **Table of Contents First**: Structure extracted first for "big picture" view
4. **Learn-as-you-go**: Concepts added incrementally during learning sessions

### Review System (SM-2)

- **Quality Scale**: 0-5 (0 = complete failure, 5 = perfect recall)
- **Adaptive Intervals**: Algorithm adjusts based on performance
  - First review: 1 day
  - Second review: 6 days
  - Subsequent: Interval × Easiness Factor
- **Failed Reviews**: Reset to 1-day interval
- **Conversation-based**: Not flashcards - test through dialogue

### Taxonomy System

**UNESCO ISCED** (Education classification):
```
34 - Business and Administration (Finance)
48 - Computing (Programming)
22 - Humanities (Language)
[...]
```

**Dewey Decimal** (Library classification):
```
000 - Computer Science
300 - Social Sciences
400 - Language
[...]
```

## Commands Reference

### `/learn <file-path>`
Start interactive learning session with a material

### `/review [domain|concept-id]`
- `/review` - Review all concepts due today
- `/review finance` - Review all finance concepts
- `/review [[concept-id]]` - Review specific concept

### `/progress [domain|file-path]`
- `/progress` - Overall progress dashboard
- `/progress finance` - Domain-specific progress
- `/progress learning-materials/...` - Material-specific progress

### `/ask <question>`
Ask any question with automatic web research and knowledge integration

### `/archive-conversation [topic-name]`
Archive current conversation as structured knowledge with extracted concepts

### `/kb-init`
Initialize or repair knowledge system (also normalizes indexes)

## Maintenance Scripts

The system includes automated index maintenance triggered by hooks. For manual maintenance:

```bash
# Rebuild bidirectional links in knowledge graph
python scripts/rebuild-backlinks.py

# Rebuild all indexes (conversations, materials, taxonomy)
python scripts/rebuild-indexes.py
```

See the comprehensive [🎯 Hooks & Automation](#-hooks--automation) section above for:
- Full list of 9 active hooks with detailed functions
- Safety protection mechanisms (user input and AI command scanning)
- Auto-index maintenance workflow (PostToolUse triggers)
- Real-world automation examples

## 🆕 New: Universal Q&A System

### Ask Anything
```bash
/ask "Explain quantum computing"
```
The **analyst** agent will:
- 🔍 Search the web automatically
- 📚 Check your existing knowledge base
- 💻 Execute code if needed
- 📖 Cite all sources

### Archive Conversations
After `/ask`:
```
Archive this conversation?
  1. Yes - Extract & save
  2. No - Discard
  3. Later - Manual
```

Or manually:
```bash
/archive-conversation topic-name
```

### Complete Backup
All conversations saved to `chats/`:
- 📅 Organized by month
- 🔗 Linked to concepts
- 🔍 Fully indexed

## Agents

### book-tutor
Expert in Socratic teaching for books, papers, reports. Asks probing questions, builds understanding through dialogue.

### language-tutor
Specialized in language learning pedagogy. Uses spaced repetition, contextual examples, conversation practice.

### finance-tutor
Finance domain expert. Teaches concepts, calculations, applications. Uses real-world scenarios.

### programming-tutor
Programming domain expert. Teaches algorithms, data structures, best practices. Uses code examples and debugging.

### review-master
Conducts spaced repetition review sessions. Tests recall through conversation, updates SM-2 schedule.

### knowledge-indexer
Maintains knowledge graph structure. Updates bidirectional links, applies taxonomy, generates indexes.

### analyst
Universal AI assistant with full tool access. Handles any question with automatic web research, code execution, and knowledge base integration.

### conversation-archiver
Converts dialogues into structured knowledge. Extracts concepts, creates Rems with bidirectional links, and archives conversations to chats/.

## File Formats

### Supported Learning Materials
- **PDF**: Native support via Claude Code Read tool
- **EPUB**: Parsed via `scripts/parse-epub.py`
- **PowerPoint**: Parsed via `scripts/parse-ppt.py`
- **Word/Excel**: Native support via Claude Code Read tool
- **Markdown**: Native support

### Progress Files
Each material gets a `.progress.md` file tracking:
- Current position (page/chapter)
- Table of contents with completion checkmarks
- Learned concepts (list of [[concept-ids]])
- Learning journal (session notes, takeaways, questions)

### Knowledge Rems
Stored in `knowledge-base/[domain]/concepts/[concept-id].md` with:
- Frontmatter (metadata, tags, taxonomy)
- Definition and explanation
- Examples and applications
- Related concepts (bidirectional links)
- Review metadata (SM-2 data)

## Best Practices

### Learning
- **Daily consistency**: 30-60 minutes daily beats irregular long sessions
- **Active engagement**: Answer questions thoughtfully, don't rush
- **Make connections**: Link new concepts to existing knowledge
- **Review regularly**: Follow SM-2 schedule for optimal retention

### Organization
- **One domain per material**: Place files in appropriate domain folder
- **Descriptive filenames**: Use clear, searchable names
- **Tag generously**: Tags help discover related concepts
- **Link proactively**: Create [[links]] during learning for better recall

### Review
- **Be honest**: Quality ratings must be accurate for SM-2 to work
- **Don't cram**: Spaced repetition is more effective than massing
- **Apply knowledge**: Think about real-world applications
- **Note weak spots**: Concepts with low quality scores need extra attention

## Git Workflow

### Initial Setup
```bash
cd /root/knowledge-system
git remote add origin <your-github-repo>
git push -u origin main
```

### Regular Commits
```bash
# After learning sessions
git add .
git commit -m "Learning session: [material] - learned [N] concepts"
git push

# After review sessions
git add .review/
git commit -m "Review session: [N] concepts reviewed"
git push
```

### Sync Across Devices
```bash
git pull   # Before starting work
git push   # After sessions
```

## Troubleshooting

### "Context limit exceeded"
- Materials are chunked automatically
- Progress files track position
- Continue with `/learn` command to resume

### "Broken links detected"
- Run knowledge-indexer to repair
- Check `knowledge-base/_index/backlinks.json`

### "No concepts due for review"
- Check `.review/schedule.json`
- View next review date with `/progress`

### "Agent not found"
- Verify agents exist in `.claude/agents/`
- Run `/kb-init` to repair

## Advanced Features

### Custom Agents
Create domain-specific tutors in `.claude/agents/[name]/instructions.md`

### Hook Integration
Add `.claude/hooks/user-prompt-submit.sh` for review reminders

### Bulk Import
Use scripts to batch-import materials from external sources

### Export
Generate study guides, summaries, or flashcards from knowledge base

## Contributing

This is a personal knowledge system template. Customize to your needs:

1. Add new domains to taxonomy
2. Create specialized agents for your fields
3. Modify progress tracking granularity
4. Adjust SM-2 parameters for your learning style

## License

MIT License - Use freely for personal learning

## Credits

Built with Claude Code by Anthropic
Inspired by SuperMemo, RemNote, and Zettelkasten methodology

---

## 📚 Detailed Documentation

For comprehensive system documentation and development roadmap:

### Active Documentation
- **[docs/README.md](./docs/README.md)** - Complete system overview with Phase 2 key concepts and architecture principles
- **[docs/phase-3-prd.md](./docs/phase-3-prd.md)** - Phase 3 Product Requirements Document
  - 10 strategic priorities across 4 implementation tiers
  - Detailed feature specifications (FSRS algorithm, MCP memory, adaptive difficulty)
  - 4-phase rollout timeline and success metrics
- **[docs/phase-3-architecture.md](./docs/phase-3-architecture.md)** - Phase 3 Technical Architecture
  - Complete component interaction diagrams (Mermaid)
  - 6 new data models (FSRS schedules, adaptive profiles, analytics aggregates)
  - 7 new components (FSRS engine, MCP manager, domain tutors, visualizer)
  - Deployment strategies, testing frameworks, security integration

### Historical Documentation (Phase 2 Baseline)
- **[docs/deprecated/](./docs/deprecated/)** - Phase 2 archived documentation
  - `2025-10-26-phase-2-prd.md` - Original requirements (completed)
  - `2025-10-26-phase-2-architecture.md` - Phase 2 technical design
  - `2025-10-26-phase-2-getting-started.md` - Phase 2 user guide
  - `2025-10-26-phase-2-implementation-plan.md` - Phase 2 implementation checklist

### Quick Links by Topic

**Architecture Deep Dive**: See [docs/phase-3-architecture.md](./docs/phase-3-architecture.md) for:
- Brownfield analysis (existing Phase 2 baseline assessment)
- Component interaction flowcharts
- Data schema evolution (SM-2 → FSRS, analytics pipeline)
- Rollback procedures and canary deployment strategies

**Roadmap & Priorities**: See [docs/phase-3-prd.md](./docs/phase-3-prd.md) for:
- TIER 1: Foundation enhancements (hooks, taxonomy, domain tutors)
- TIER 2: Competitive differentiation (FSRS, MCP memory, D3 visualization)
- TIER 3: Enhanced UX (adaptive difficulty, analytics dashboards)
- TIER 4: Ecosystem expansion (mobile sync, export formats)

---

Happy learning! 🎓
